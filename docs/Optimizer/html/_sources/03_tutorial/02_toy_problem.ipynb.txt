{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Toy problem\n",
    "\n",
    "In this example, we'll be minimizing the [Rastrigin function](https://en.wikipedia.org/wiki/Rastrigin_function) in five dimensions. This is non-convex problem that has a known global optimum at $\\mathbf{x^*} = \\mathbf{0}$ with $f(\\mathbf{x}) = 0$. Functions like this are often used for testing the convergence properties of gradient-free optimization algorithms. The Rastrigin function, and a few others are included in `optimizer.testing.problems`. \n",
    "\n",
    "\n",
    "![Rastrigin Function Image](https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Rastrigin_function.png/1024px-Rastrigin_function.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(0)\n",
    "np.set_printoptions(precision=4, suppress=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from optimizer.testing.problems import Rastrigin\n",
    "\n",
    "rastrigin = Rastrigin()\n",
    "dimension = 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These testing functions have methods describing their bounds and global optimum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(-5.12, 5.12), (-5.12, 5.12), (-5.12, 5.12), (-5.12, 5.12), (-5.12, 5.12)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bounds = rastrigin.bounds(dimension)\n",
    "bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([0., 0., 0., 0., 0.]), 0.0)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_best, f_x = rastrigin.best(dimension)\n",
    "x_best, f_x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Solver\n",
    "\n",
    "For this example, we'll use the `DifferentialEvolutionSolver`. Differential evolution is a gradient-free optimization technique from the evolutionary computing world. See [here](https://en.wikipedia.org/wiki/Differential_evolution) for more detail. Solvers take the bounds of your problem for initialization and clipping during the optimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from optimizer.solvers import DifferentialEvolutionSolver\n",
    "\n",
    "solver = DifferentialEvolutionSolver(bounds)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `ask` method\n",
    "\n",
    "Ask method simply returns a matrix of parameters, each row being a potential solution to the problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = solver.ask()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ask returns a matrix with shape `(popsize, dim)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(75, 5)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.9733, -4.1951, -3.0556, -1.7553,  1.6368],\n",
       "       [ 0.3839, -3.233 , -2.1747,  4.7728,  0.9128],\n",
       "       [ 3.2402, -3.0334, -1.9004, -4.8519, -1.187 ],\n",
       "       [ 3.655 , -3.9681,  1.5952, -2.258 , -3.4548],\n",
       "       [ 4.3113,  3.2266, -2.7861,  4.1704, -4.8372],\n",
       "       [ 0.2718,  0.7946, -0.8098, -1.8593, -4.2982],\n",
       "       [-0.3108, -2.172 ,  1.3604, -0.5147,  5.0162],\n",
       "       [-2.1741,  2.8176, -2.0208, -4.0195, -1.7853],\n",
       "       [ 1.3551, -1.5116,  2.4985, -1.3446,  4.7044],\n",
       "       [ 2.5659,  4.9458,  0.5398,  4.507 ,  1.5315]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initially, the solutions will all be randomly sampled from the domain."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluating\n",
    "\n",
    "Evaluation applies the problem's objective to the current matrix of parameters. In general, this step is any function that you're trying to optimize that accepts a matrix and returns a vector. In practice, handling constraints will also be included in this step. See [this notebook](./03_constraints.ipynb) for more on handling constraints. Here, we just simply apply `rastrigin`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 67.2026,  80.8073,  69.9346, 112.8665, 117.5876,  64.8632,\n",
       "        87.5097,  55.3411, 118.8291, 133.2083,  68.7162, 111.1992,\n",
       "       111.5314, 113.0627, 105.5981, 103.3241,  66.0053,  65.501 ,\n",
       "        41.5142,  86.852 , 102.1357,  67.2408, 106.7148,  85.6165,\n",
       "        89.4707, 120.2213, 101.7589, 136.2612,  88.1537, 101.2663,\n",
       "        81.7268, 101.3448,  71.3602, 111.2656, 105.439 ,  89.4966,\n",
       "       103.254 ,  79.8669, 140.5031,  96.884 ,  80.5271, 117.1688,\n",
       "        91.3008,  77.4327,  79.3168, 119.0811,  77.3873,  82.1885,\n",
       "        97.2795,  37.5762,  87.62  ,  70.207 , 121.1777,  73.6876,\n",
       "        84.7634,  51.3015, 101.1217, 100.1719,  78.6091,  83.2717,\n",
       "        59.9528, 109.6091, 128.9084,  99.5926,  70.7917,  83.5134,\n",
       "        89.9018,  59.0307,  87.1306,  79.8559, 141.9388, 107.2609,\n",
       "       140.2876,  94.3334,  72.051 ])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "objectives = rastrigin(parameters)\n",
    "objectives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### `tell` method\n",
    "\n",
    "The tell method takes a matrix and a vector of objective values as input. In its most simple form, the matrix can be the exact same parameter returned by the call to the `ask` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "objectives = rastrigin(parameters)\n",
    "solver.tell(parameters, objectives)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The solver will use then information provided by the objective values to generate new ones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters = solver.ask()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.7218,  0.2261, -3.0858,  0.3659, -0.8325],\n",
       "       [-3.0766, -0.3474, -0.098 , -0.5013,  4.3248],\n",
       "       [ 1.709 , -2.5667, -1.9004,  0.009 ,  1.3284],\n",
       "       [ 2.429 , -2.3583,  1.5952,  1.415 , -0.6712],\n",
       "       [ 2.538 ,  1.8905, -0.1239,  4.1704, -1.3369],\n",
       "       [-4.5472,  0.7946,  1.565 , -1.8593,  3.7113],\n",
       "       [-0.3108, -0.3872, -2.2427,  1.3861,  5.0162],\n",
       "       [-3.5971,  1.6957,  0.476 ,  4.733 , -1.7853],\n",
       "       [-4.0397, -1.9989, -1.0861, -3.4957,  1.3273],\n",
       "       [ 2.5659,  4.9458,  2.561 ,  4.507 ,  2.852 ]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parameters[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Ask and Tell method has the added benefit of being able to change solutions at will. For example, if we want to modify a column, we can simply do so and the solver will accept the modified parameters as input to the `tell` method without any extra work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "parameters[:, 0] = np.round(parameters[:, 0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "objectives = rastrigin(parameters)\n",
    "solver.tell(parameters, objectives)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solver loop\n",
    "\n",
    "Now we can put these concepts together to solve the Rastrigin function. Over time, the solver will use better solutions to guide the search toward the optimum. Differential evolution comes with no guarantees on convergence, but this random seed will find the optimum."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "solver = DifferentialEvolutionSolver(bounds, maxiter=1000)\n",
    "\n",
    "while not solver.stop():\n",
    "    parameters = solver.ask()\n",
    "    \n",
    "    objectives = rastrigin(parameters)\n",
    "    \n",
    "    solver.tell(parameters, objectives)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we included `maxiter=1000` in the solver constructor. As a result, `solver.stop()` will return `True` after 1000 iterations of the solver loop. More specifically, after 1000 calls to `solver.ask()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best solution: [ 0.  0.  0. -0. -0.]\n",
      "\n",
      "Best objective: 0.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Best solution: {}\\n\\nBest objective: {}\".format(*solver.best()))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
