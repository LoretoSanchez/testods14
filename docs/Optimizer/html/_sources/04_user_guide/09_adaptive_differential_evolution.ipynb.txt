{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Adaptive Differential Evolution example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The optimizer itself\n",
    "from optimizer.experimental.solvers import AdaptiveDifferentialEvolutionSolver\n",
    "\n",
    "# The parameters\n",
    "from optimizer.experimental.solvers.adaptive_differential_evolution import AdaptiveParameter, NormalAdaptiveParameter, ConstantAdaptiveParameter\n",
    "\n",
    "# The mutators\n",
    "from optimizer.experimental.solvers.adaptive_differential_evolution import Mutator, Best1Mutator, Best2Mutator, Rand1Mutator\n",
    "\n",
    "# The crossovers\n",
    "from optimizer.experimental.solvers.adaptive_differential_evolution import Crossover, BinomialCrossover\n",
    "\n",
    "# The pickers\n",
    "from optimizer.experimental.solvers.adaptive_differential_evolution import AdaptiveStrategy, RandomAdaptiveStrategy\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vanilla DE logic\n",
    "- Initialize with some strategy a population\n",
    "- Until some criteria is met:\n",
    " - Build one mutant for each solution (using Mutator)\n",
    " - Combine each solution with its mutant (Crossover)\n",
    " - Evaluate this combination and update improved current solutions\n",
    "\n",
    "## What can we define and tune?\n",
    "- Mutator approach(es), and how to pick them\n",
    "- Mutator(s) can have internal parameters\n",
    "- Crossover approach(es), and how to pick them\n",
    "- Crossovers can have internal parameters\n",
    "\n",
    "## Adaptive Differential Evolution\n",
    "*Adaptive* stands for the capability of modifying logic based on runtime feedback from the optimizer.\n",
    "\n",
    "- How to define the adaptive logic that will pick one mutator from a pool of possible mutators\n",
    "- How to define adaptive parameters\n",
    "\n",
    "### Some setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Some config\n",
    "dim = 50\n",
    "maxiter = 100\n",
    "popsize = 10\n",
    "seed = 42\n",
    "\n",
    "# def obj(x: np.ndarray) -> np.array:\n",
    "#     return x.sum(axis=1)\n",
    "\n",
    "def obj(x: np.ndarray) -> np.array:\n",
    "    return np.sin(x).sum(axis=1)\n",
    "\n",
    "bounds = [(0, 1000) for i in range(dim)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Aux functions\n",
    "def _run_strategy(mutator_picker: AdaptiveStrategy, crossover_picker: AdaptiveStrategy = None) -> np.array:\n",
    "    bests = []\n",
    "    \n",
    "    solver = AdaptiveDifferentialEvolutionSolver(bounds, \n",
    "                                                 sense='maximize', \n",
    "                                                 seed=seed, \n",
    "                                                 popsize=popsize, \n",
    "                                                 maxiter=maxiter, \n",
    "                                                 mutator_strategy_picker=mutator_picker, \n",
    "                                                 crossover_strategy_picker=crossover_picker)\n",
    "    while not solver.stop():\n",
    "        parameters = solver.ask()\n",
    "        objective_values = obj(parameters)\n",
    "        solver.tell(parameters, objective_values)\n",
    "\n",
    "        bests.append(solver.best()[1])\n",
    "\n",
    "    return np.array(bests)\n",
    "\n",
    "def run(strategies):\n",
    "    strategy_convergence = {}\n",
    "    for name, strategy in strategies.items():\n",
    "        strategy_convergence[name] = _run_strategy(strategy)\n",
    "    convergence_df = pd.DataFrame(strategy_convergence)\n",
    "    return convergence_df\n",
    "\n",
    "# Plot all the convergences\n",
    "def plot(convergence_df: pd.DataFrame):\n",
    "    fix, ax = plt.subplots(figsize=(15, 5))\n",
    "    convergence_df.plot(ax=ax, drawstyle=\"steps-post\")\n",
    "    ax.set_xlim(-1, len(convergence_df)+1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Sample run of two approaches\n",
    "An approach is a picker_strategy + configured mutators. In this case, we want to compare the following two approaches:\n",
    "- Randomly select between {Best1Mutator, Best2Mutator}\n",
    "- Randomly select between {Best1Mutator, Rand1Mutator}\n",
    "\n",
    "The mutators use $f=1$, fixed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We set up two Mutators in a single strategy. In this case we set the seed to all randomized objects for reproducibility.\n",
    "strategies = {\n",
    "    'random_best1_best2_mutator_strategy': RandomAdaptiveStrategy({'best1': Best1Mutator(f=1, seed=seed), 'best2': Best2Mutator(f=1, seed=seed)}, seed=seed),\n",
    "    'random_best1_rand1_mutator_strategy': RandomAdaptiveStrategy({'best1': Best1Mutator(f=1, seed=seed), 'rand1': Rand1Mutator(f=1, seed=seed)}, seed=seed)\n",
    "}\n",
    "plot(run(strategies))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Picking mutator based on prior success"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Dict, Union, Tuple\n",
    "from scipy._lib._util import check_random_state\n",
    "\n",
    "class ImprovementsBasedAdaptiveStragey(AdaptiveStrategy):\n",
    "    def __init__(self, strategies: Dict[str, Union[Crossover, Mutator]], seed=None):\n",
    "        super().__init__(strategies)\n",
    "        self._rng = check_random_state(seed)\n",
    "        \n",
    "        # We add a success counter, initializng it in 0\n",
    "        self._success_counts = {strategy_name: 1 for strategy_name in strategies}\n",
    "\n",
    "    def get_strategy(self) -> Tuple[str, Union[Crossover, Mutator]]:\n",
    "        # Build a vector with strategies and its counters, then normalize the counters to be probabilities, then use np.random.choice with parameter p\n",
    "        # Not the most efficient implementation, but numbers are so small that it's unlikely to be relevant.\n",
    "        s = list(self._success_counts)\n",
    "        p = list(self._success_counts.values())\n",
    "        p = np.array(p) / sum(p)\n",
    "        \n",
    "        strategy_picked = self._rng.choice(s, p=p)\n",
    "        return strategy_picked, self._strategies[strategy_picked]\n",
    "\n",
    "    def _process_feedback(\n",
    "        self, strategy: str, previous_objective: np.ndarray, new_objective: np.ndarray\n",
    "    ):\n",
    "        improved = new_objective < previous_objective\n",
    "        self._success_counts[strategy] += improved.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We set up the previous two with and the new AdaptiveStraegy to see what happens. We still give the same Mutator options to the strategies to pick from\n",
    "strategies = {\n",
    "    'random_best1_best2_mutator_strategy': RandomAdaptiveStrategy({'best1': Best1Mutator(f=1), 'best2': Best2Mutator(f=1)}),\n",
    "    'random_best1_rand1_mutator_strategy': RandomAdaptiveStrategy({'best1': Best1Mutator(f=1), 'rand1': Rand1Mutator(f=1)}),\n",
    "    'improvement_based_best1_best2_mutator_strategy': ImprovementsBasedAdaptiveStragey({'best1': Best1Mutator(f=1), 'best2': Best2Mutator(f=1)}),\n",
    "    'improvement_based_best1_rand1_mutator_strategy': ImprovementsBasedAdaptiveStragey({'best1': Best1Mutator(f=1), 'rand1': Rand1Mutator(f=1)}),\n",
    "}\n",
    "plot(run(strategies))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using an adaptive parameter\n",
    "An example of how to implement and use an adaptive parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "class TwoOptionsAdaptiveParameter(AdaptiveParameter):\n",
    "    \"\"\"Implements a parameter that with probability p takes value X and with probability p-1 takes value Y.\n",
    "    \"\"\"\n",
    "    def __init__(self, x: float, y: float, p: float, seed=None):\n",
    "        super().__init__()\n",
    "        self._x = x\n",
    "        self._y = y\n",
    "        self._p = p\n",
    "        self._rng = check_random_state(seed)\n",
    "\n",
    "    def value(self) -> float:\n",
    "        return self._x if self._rng.random() < self._p else self._y\n",
    "\n",
    "    def _process_feedback(\n",
    "        self, previous_objective: np.ndarray, new_objective: np.ndarray\n",
    "    ):\n",
    "        # Nothing to do here.\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2gAAAEvCAYAAAAw1OLAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/d3fzzAAAACXBIWXMAAAsTAAALEwEAmpwYAAAw4UlEQVR4nO3de3QV9b3//+cHgoAgCIWFEVTAIggGEuRaijXyVWmxUlT0oCjQIhxbq2JPKV7Bs9TSU0RsrbZeuNgDFrEqtOBvKRULVAUDAlGgghotiApoQUDl9vn9kZADSEgglz0kz8daWWTPzJ55s/ewySvvz3wmxBiRJEmSJKVetVQXIEmSJEnKZ0CTJEmSpIQwoEmSJElSQhjQJEmSJCkhDGiSJEmSlBAGNEmSJElKiLSKPFijRo1i8+bNK/KQkiRJkpQYS5Ys2RRjbFzU+goNaM2bNycnJ6ciDylJkiRJiRFCeP9w6x3iKEmSJEkJYUCTJEmSpIQwoEmSJElSQlToNWiHsmvXLtatW8eXX36Z6lIkVYBatWrRrFkzatSokepSJEmSEiflAW3dunWccMIJNG/enBBCqsuRVI5ijGzevJl169bRokWLVJcjSZKUOCkf4vjll1/yjW98w3AmVQEhBL7xjW/YMZckSSpCygMaYDiTqhD/vUuSJBUtEQFNkiRJkmRAKxfNmzdn06ZN5bLvMWPGMG7cuFLvZ8KECezYsaPw8W233cYpp5xC3bp1S73vIzV58mSuv/56AObPn0/Hjh1JS0vj6aefLtfj5uXlMW3atDLbrjTuvffeo3rewe9jqv3zn/8kMzOz8KtevXpMmDAh1WVJkiQdM1I+SUjSxBiJMVKtWuXOrhMmTGDgwIEcf/zxAHz/+9/n+uuvp1WrVke0n927d5OWVnan0amnnsrkyZPLJIQWZ1/wuvLKK8tku/0d6ety7733cuutt35teXHn48HvY6q1bt2aZcuWAbBnzx6aNm1Kv379UluUJEmqEqYt+oCZy9aX+3HanlyP0d9vV277r9wppITy8vJo3bo111xzDWeddRY/+tGP6NSpE+3atWP06NGF2zVv3pzRo0fTsWNHMjIyWL16NQCbN2/mggsuoF27dgwdOpQYY+Fzxo8fz1lnncVZZ51V2EnIy8ujTZs2DB48mDPOOIOrrrqKuXPn0qNHD1q1asXixYsPW+/y5cvp3r07rVq14tFHHy1c/utf/5rOnTvTvn37wrq3b99Onz596NChA2eddRbTp0/nN7/5DR9++CHZ2dlkZ2cD0K1bN9LT00v0eg0ePJj//M//pGvXrowcOZLFixfTvXt3srKy+Na3vsU///lPIL8zdskll9C7d29atWrFyJEjC/cxadIkzjjjDLp06cI//vGPA17j9u3blyggv/zyy3znO9+hb9++tGzZklGjRjF16lS6dOlCRkYG77zzTmG9+3fj9nUJR40axYIFC8jMzOT+++8nLy+Pnj170rFjRzp27Mgrr7xyyO2+/PJLhgwZQkZGBllZWcybN6/w73vxxRdz3nnn0atXr0PWvGHDBs455xwyMzM566yzWLBgAaNGjeKLL74gMzOTq6666mvn47/+9S+uu+66r52Th3ofX3jhBbp3707Hjh3p378/27ZtA2DOnDm0adOGs88+mxtuuIGLLrqIvXv30qpVKzZu3AjA3r17+eY3v1n4uKj3vVOnTpxxxhn89a9/Pez787e//Y3TTz+d0047rdj3UpIkqbRmLlvPyg1bU11GqSWqg3bXX95i5Ydl+6KWNOGuWbOGKVOm0K1bNz799FMaNmzInj176NWrFytWrKB9+/YANGrUiKVLl/LQQw8xbtw4HnvsMe666y6+/e1vc+eddzJ79mwef/xxAJYsWcKkSZNYtGgRMUa6du3Kd77zHRo0aMDatWuZMWMGEydOpHPnzkybNo2FCxcya9Ys7r33Xp577rkia12xYgWvvfYa27dvJysriz59+vDmm2+yZs0aFi9eTIyRiy++mPnz57Nx40ZOPvlkZs+eDcCWLVuoX78+48ePZ968eTRq1OioXtd169bxyiuvUL16dbZu3cqCBQtIS0tj7ty53Hrrrfz5z38GYNmyZbzxxhvUrFmT1q1b89Of/pS0tDRGjx7NkiVLqF+/PtnZ2WRlZR1VHcuXL2fVqlU0bNiQli1bMnToUBYvXswDDzzAb3/728MOrxs7dizjxo0rDBo7duzgxRdfpFatWqxZs4YBAwaQk5Pzte3uu+8+Qgjk5uayevVqLrjgAt5++20Ali5dyooVK2jYsOEhjzlt2jQuvPBCbrvtNvbs2cOOHTvo2bMnDz74YGHnKS8v74DzEeCee+752jl5ww03HPA+btq0ibvvvpu5c+dSp04dfvWrXzF+/HhGjhzJ8OHDmT9/Pi1atGDAgAEAVKtWjYEDBzJ16lRuuukm5s6dS4cOHWjcuHGRr1leXh6LFy/mnXfeITs7m7Vr11KrVq1DbvunP/2p8FiSJEkVoW16PaYP757qMkrFDlqB0047rfCH4aeeeoqOHTuSlZXFW2+9xcqVKwu3u+SSSwA4++yzycvLA/Kvmxo4cCAAffr0oUGDBgAsXLiQfv36UadOHerWrcsll1zCggULAGjRogUZGRlUq1aNdu3a0atXL0IIZGRkFO63KH379qV27do0atSI7OxsFi9ezAsvvMALL7xAVlYWHTt2ZPXq1axZs4aMjAxefPFFfvGLX7BgwQLq169fJq9X//79qV69OpAf+vr3789ZZ53FiBEjeOuttwq369WrF/Xr16dWrVq0bduW999/n0WLFnHuuefSuHFjjjvuOK644oqjrqNz586kp6dTs2ZNTj/9dC644AKAEr2OB9u1axfXXnstGRkZ9O/f/4D3fX8LFy4sfL/btGnDaaedVhjQzj///CLD2b56J02axJgxY8jNzeWEE0445Hb7n49w+HNyn9dee42VK1fSo0cPMjMzmTJlCu+//z6rV6+mZcuWhfcd2z80/fCHP+SJJ54AYOLEiQwZMuRwLxGXX3451apVo1WrVrRs2bKwi3ywnTt3MmvWLPr373/Y/UmSJOlAieqgledYzuLUqVMHgPfee49x48bx+uuv06BBAwYPHnzAPZtq1qwJQPXq1dm9e/dRH2/ffiC/k7HvcbVq1Yrd78HTlIcQiDFyyy23MHz48K9tv3TpUubMmcPtt99Or169uPPOO4+67n32vV4Ad9xxB9nZ2Tz77LPk5eVx7rnnFq7b/+9Z2tfsUEryOqalpbF3714gfxjfzp07D7mv+++/nyZNmrB8+XL27t1bZGfocPZ/XQ7lnHPOYf78+cyePZvBgwdz8803c8011xx2P8Wdk/vEGDn//PN58sknD1i+rzN3KKeccgpNmjThpZdeYvHixUydOvWw9R/q3DuU559/no4dO9KkSZPD7k+SJEkHsoN2kK1bt1KnTh3q16/Pxx9/zPPPP1/sc84555zCWf6ef/55PvvsMwB69uzJc889x44dO9i+fTvPPvssPXv2LHWNM2fO5Msvv2Tz5s28/PLLdO7cmQsvvJCJEycWXnO0fv16PvnkEz788EOOP/54Bg4cyM9//nOWLl0KwAknnMDnn39e6logv4PWtGlTIP86rOJ07dqVv//972zevJldu3YxY8aMMqmjKM2bN2fJkiUAzJo1i127dgFffw22bNlCeno61apV449//CN79uw55HY9e/YsDDJvv/02H3zwAa1bty5RLe+//z5NmjTh2muvZejQoYXvR40aNQrrOtjhzsn9a+vWrRv/+Mc/WLt2LZB//eHbb79N69ateffddws7itOnTz9g/0OHDmXgwIEHdEWLMmPGDPbu3cs777zDu+++W+Tf+8knn3R4oyRJ0lFIVActCTp06EBWVhZt2rThlFNOoUePHsU+Z/To0QwYMIB27drxrW99i1NPPRWAjh07MnjwYLp06QLk/yCclZV1xEPvDta+fXuys7PZtGkTd9xxByeffDInn3wyq1atonv3/DG3devW5X//939Zu3YtP//5z6lWrRo1atTg4YcfBmDYsGH07t2bk08+mXnz5jFy5EimTZvGjh07aNasGUOHDmXMmDElqmfkyJEMGjSIu+++mz59+hS7fXp6OmPGjKF79+6ceOKJZGZmFq57/fXX6devH5999hl/+ctfGD169AFDJo/GtddeS9++fenQoQO9e/cu7E61b9+e6tWr06FDBwYPHsyPf/xjLr30Up544olit7vuuuvIyMggLS2NyZMnH9DJO5yXX36ZX//619SoUYO6desWDi8cNmwY7du3p2PHjtxzzz0HPOdw5+TB7+PkyZMZMGAAX331FQB33303Z5xxBg899FDh36lz584H7P/iiy9myJAhxQ5vhPxZNrt06cLWrVv5/e9/T61atfjwww8ZOnQoc+bMAfKD4Ysvvsgf/vCHEr0mkqRykjMJcsv3ljVSkty5eUv+N5PK5pKeIp2UAd8dW267D/vPOFjeOnXqFHNycg5YtmrVKs4888wKq0GqirZt20bdunWJMfKTn/yEVq1aMWLECABycnIYMWJE4fWRRRk8eDAXXXQRl112Wanr8d+9VI78oVz7vL8w/8/Tvp3aOqQK8taG/IDWLj3ZAS2EsCTG2Kmo9XbQpCrg0UcfZcqUKezcuZOsrKzCaxXHjh3Lww8/XOy1Z1KZMDhUDH8o1z6nfRsyLoNOxY+QkCqD//7DqwBMH3Jsz+JoQEuoSZMm8cADDxywrEePHvzud7+rsBruueeer10f1r9/f2677bYK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dy516tThV7/6FePHj2fkyJEMHz6c+fPn06JFCwYMGADkh+CBAwcydepUbrrpJubOnUuHDh0OGc72ycvLY/HixbzzzjtkZ2ezdu1aatWqVeS2b7zxBl27di36DVS+4jpk+8KZU9xLFaa0HbB94Szp92OSlDwl6aClA1MKrkOrBjwVY/xrCOGlgvAWgGXAf5a6mmI6XeXptNNOK/xh+KmnnuKRRx5h9+7dbNiwgZUrVxYGtEsuuQSAs88+m2eeeQaA+fPnF37fp08fGjRoAMDChQvp168fderUKXzuggULuPjii2nRogUZGfm/DW/Xrh29evUihEBGRgZ5eXmHrbVv377Url2b2rVrk52dzeLFi1m4cCEvvPBCYdDZtm0ba9asoWfPnvzsZz/jF7/4BRdddBE9e/Ysk9erf//+VK9eHcgPfYMGDWLNmjWEENi1a1fhdr169aJ+/foAtG3blvfff59NmzZx7rnnFgaBK664ojDgHKnOnTsXdmxOP/10LrjgAgAyMjKYN2/eEe1r165dXH/99Sxbtozq1asXWdPChQv56U9/CkCbNm047bTTCrc9//zziwxn++r94Q9/yK5du/jBD35AZmbmIbfb/3yEw5+T+7z22musXLmSHj16ALBz5066d+/O6tWradmyJS1atABgwIABPPLIIwD88Ic/pG/fvtx0001MnDiRIUMO3325/PLLqVatGq1ataJly5asXr36kH+Hbdu2cemllzJhwgTq1fO3x8UqrkPm8EKpwpW2A1ZZhlpJqnglmcVxBfC19kaM8bxyqShF9oWo9957j3HjxvH666/ToEEDBg8ezJdfflm43b6heNWrV2f37t1Hfbx9+4H8Tsa+x9WqVSt2v/lNywMfxxi55ZZbGD58+Ne2X7p0KXPmzOH222+nV69e3HnnnUdd9z77Xi+AO+64g+zsbJ599lny8vI499xzC9ft//cs7Wt2KCV5HdPS0ti7dy8Ae/fuZefOnYfc1/3330+TJk1Yvnw5e/fuLbIzdDj7vy6Hcs455zB//nxmz57N4MGDufnmm7nmmmsOu5/izsl9Yoycf/75PPnkkwcs39eZO5RTTjmFJk2a8NJLL7F48WKmTp162PoPde4dbNeuXVx66aVcddVVhb/QUAnYIZMSxw6YpFQou9kdKomtW7dSp04d6tevz8cff8zzzz9/QOA4lHPOOYdp06Zx++238/zzz/PZZ58B0LNnTwYPHsyoUaOIMfLss8/yxz/+sdQ1zpw5k1tuuYXt27fz8ssvM3bsWGrXrs0dd9zBVVddRd26dVm/fj01atRg9+7dNGzYkIEDB3LiiSfy2GOPAfnXB33++edlMtPkli1baNo0/7eEkydPLnb7rl27cuONN7J582bq1avHjBkz6NChQ6nrKErz5s1ZsmQJl19+ObNmzSrs8O17DfbZsmULzZo1o1q1akyZMoU9e/YccruePXsydepUzjvvPN5++20++OADWrduzdKlS4ut5f3336dZs2Zce+21fPXVVyxdupRrrrmGGjVqsGvXLmrUqPG15xzunNz/fezWrRs/+clPWLt2Ld/85jfZvn0769evp3Xr1rz77rvk5eXRvHlzpk+ffsD+hw4dysCBA7n66qsLu6JFmTFjBoMGDeK9997j3XffpXXr1gesjzHyox/9iDPPPJObb7652NfjmOEMiVKiVMQEHF4/JilVKvdUhUehQ4cOZGVl0aZNG6688srC4WKHM3r0aObPn0+7du145plnCm8n0LFjRwYPHkyXLl3o2rUrQ4cOPeprrfbXvn17srOz6datG3fccQcnn3wyF1xwAVdeeSXdu3cnIyODyy67jM8//5zc3Fy6dOlCZmYmd911F7fffjsAw4YNo3fv3mRnZwMwcuRImjVrxo4dO2jWrBljxowpcT0jR47klltuISsrq0QdsvT0dMaMGUP37t3p0aMHZ555ZuG6119/nWbNmjFjxgyGDx9Ou3btjuzFOYRrr72Wv//973To0IFXX321sDvVvn17qlevTocOHbj//vv58Y9/zJQpU+jQoQOrV68+7HZ79+4lIyODK664gsmTJx/QyTucl19+ufAcmz59euEU9MOGDaN9+/ZcddVVX3vO4c7J/d/Hxo0bM3nyZAYMGED79u0LhzfWrl2bhx56iN69e3P22WdzwgknFA47Bbj44ovZtm1bscMbIX+WzS5duvDd736X3//+99SqVYsPP/yQ733vewD84x//4I9//CMvvfQSmZmZZGZmMmfOnBK9Nom2bwhieXEIo3RE9g0/LE8OUZSUKmH/GQfLW6dOnWJOTs4By1atWnXAD+iSyt62bduoW7cuMUZ+8pOf0KpVK0aMGAFATk4OI0aMYMGCBYfdx8GzYZbGMffvflKf/D8d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\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# This configures two f parameters, one for the first strategy and one for the second. \n",
    "# Note that within one single strategy, all mutators use the same f. This is useful if \n",
    "# we want to use a single f for all mutators, or we can add more f parameters and pass \n",
    "# different objects to different mutators in the same strategy -- making the f's effectively independent.\n",
    "\n",
    "f1 = TwoOptionsAdaptiveParameter(x=.7, y=1.2, p=.7)\n",
    "f2 = TwoOptionsAdaptiveParameter(x=.7, y=1.2, p=.2)\n",
    "strategies = {\n",
    "    'random_best1_rand1_mutator_strategy_p.7': RandomAdaptiveStrategy({'best1': Best1Mutator(f=f1), 'rand1': Rand1Mutator(f=f1)}),\n",
    "    'random_best1_rand1_mutator_strategy_p.2': RandomAdaptiveStrategy({'best1': Best1Mutator(f=f2), 'rand1': Rand1Mutator(f=f2)}),\n",
    "}\n",
    "plot(run(strategies))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that using a very low f value is not beneficial. f1 parameter works better, and the difference is that is takes value 1.2 more often."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Happy hacking!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
